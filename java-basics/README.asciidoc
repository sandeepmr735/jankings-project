# Java Basics

Let's refresh our memory. Revise Java basics!

#### Prerequisites
- Install OpenJDK 11.
- and verify!


#### Verify
```
$ javac -version

javac 11.0.6
```

```
$ java -version

openjdk version "11.0.6" 2020-01-14
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.6+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.6+10, mixed mode)
```


#### Write a class

```
$ touch java-basics/HelloWorld.java
```

```
$ cat > java-basics/HelloWorld.java <<EOF
class HelloWorld {

    public static void main(String args[]) {
        System.out.println("Hello World!");
    }
}
EOF
```

```
$ javac java-basics/HelloWorld.java
```

```
$ cd java-basics && java HelloWorld && cd ..

Hello World!
```


#### Bonus

```
$ cd java-basics
$ jar cvf hello-world.jar HelloWorld.class

added manifest
adding: HelloWorld.class(in = 426) (out= 289)(deflated 32%)
```

```
$ cd java-basics
$ java -cp hello-world.jar HelloWorld

Hello World!
```


#### Advanced

```
$ javap -v -c java-basics.HelloWorld

Warning: File ./java-basics/HelloWorld.class does not contain class java-basics.HelloWorld
Classfile /Users/mossaddeque/Dropbox/Github/technical-workshops/java-basics/HelloWorld.class
  Last modified 26 Mar 2020; size 426 bytes
  MD5 checksum 2c475802bcca94e8aa57addc6cffd5a1
  Compiled from "HelloWorld.java"
class HelloWorld
  minor version: 0
  major version: 55
  flags: (0x0020) ACC_SUPER
  this_class: #5                          // HelloWorld
  super_class: #6                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1
Constant pool:
   #1 = Methodref          #6.#15         // java/lang/Object."<init>":()V
   #2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = String             #18            // Hello World!
   #4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = Class              #21            // HelloWorld
   #6 = Class              #22            // java/lang/Object
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               main
  #12 = Utf8               ([Ljava/lang/String;)V
  #13 = Utf8               SourceFile
  #14 = Utf8               HelloWorld.java
  #15 = NameAndType        #7:#8          // "<init>":()V
  #16 = Class              #23            // java/lang/System
  #17 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;
  #18 = Utf8               Hello World!
  #19 = Class              #26            // java/io/PrintStream
  #20 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V
  #21 = Utf8               HelloWorld
  #22 = Utf8               java/lang/Object
  #23 = Utf8               java/lang/System
  #24 = Utf8               out
  #25 = Utf8               Ljava/io/PrintStream;
  #26 = Utf8               java/io/PrintStream
  #27 = Utf8               println
  #28 = Utf8               (Ljava/lang/String;)V
{
  HelloWorld();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 1: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #3                  // String Hello World!
         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 4: 0
        line 5: 8
}
SourceFile: "HelloWorld.java"
```